Expres.js - 

    Express.js is a Backend Web Framework for Node.js. Desined for building serverside Web application and APIs.

    index.js - 

        const express = require('express')

        const app = express()

        app.listen(PORT, () => { .... }) ... node index.js ... will start running the server-side-application in the server.



    
    API - Application Programming Interface is a software intermediary b/w computers for secure communication.

    API endpints are URLs for specific service operated with req and res parameters.




    REST - Representational State Tansfer is an architechtural style for providing standards b/w computers on web for communication.
           JSON is preferred for data transfer. It supports operations like - GET, PUT, POST, DELETE and
           we can define some endpoints for these operations.

           RESTful Web Service is ->

                1) Uniform Interface - Resource based (Different rosource different endpoint).
                2) Statelessness - Server does not store client state. Client passes its context
                                   to the server and the server processs the request with the context.
                3) Cacheable.

           GET, POST, PUT, PATCH, and DELETE are the five most common HTTP methods for retrieving from and sending data to a server.

           GET - Method to retrieve data from the server.
           POST - Method to send data to the server and to create a new resource (Object in database).
           PUT - Method to update a full existing resource (Full new version of the resource must be added in request body).
           PATCH - Method to update a specific part of a resource (Specific change is added in request body).
           DELETE - Method to delete a resource.

           

    app.use(express.json()) .. Body parser .. allows adding json objects to the body.





    Routes - Routing defines the way in which the client http requests are handled by the application endpoints.

    Express Routing -

        router.js File ->
        
            const express = require('express')
            const userRouter = express.router()

            userRouter.get('/', () => { contrller function })

            module.exports = userRouter

        index.js File ->

            app.use('/api/user/', userRouter) ... Major function of use() is configuring middleware


    

    Middleware - Function that runs when an http request is sent to an api endpoint.

        app.use(middleware) .... middleware added to all routes.
        
        userRouter.get('/', middleware, () => { controller function })  .... middleware for specific routes

    


    Controller function -

        request - 

            const config = { headers: { 'Content-Type': 'application/json'}}

            const { data } = await axios.post('/api/users/login' , { email , password } , config)


        route - 

            router.post('/login', async (req, res) =>
            {
                cont {email, password} = req.body

                .....

                res.status(200).json({ .... })
            })



        request -

            const config = { headers: { Authorization: `Bearer ${userInfo.token}`, }, }  ... Bearer is a specific type of access token
  
            const { data } = await axios.get(`/api/users/${id}`, config)

        route - 

            router.get('/:id', async (req, res) =>
            {
                req.user._id                     ...... req.user = user details added in AuthMiddleware,
                                                        
                                                        token = req.headers.authorization.split(' ')[1]

                res.status(200).json({ .... })
            })



        request - 

            const config = { headers: { Authorization: `Bearer ${userInfo.token}` , } , }
  
            await axios.delete(`/api/users/${id}` , user, config) ...... user is object of user details


        route - 

            router.delete('/:id', async (req, res) =>
            {
                req.params.id                     ...... delete user by admin

                req.user

                res.status(200).json({ .... })
            })